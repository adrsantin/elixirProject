Request -> Router -> Check rules -> Designated controller and function

Controller: Takes data from models, adapt them to views and returns to user

render function looks for a html page and returns it

Views and Templates:

    View is connected to a Controller by name
    All views names are loaded on boot
    These names are linked to the templates with same name and the templates are 
    loaded as functions of the views
    
To debug phoenix applications: `iex -S mix phoenix.server`
This starts the server with the elixir console to call functions

To create migrations (intructions to the database):
`mix ecto.gen.migration <migration_name>`
Change function instructs postgres on what to do
To run migrations: `mix ecto.migrate`

First, create new route
    For every user intent, there is a Action (Get, Post, etc...) and a 
    controller function name (REST)
Then create new controller and function (Controller names are singular)
    Function must return something
When Creating model, must create schema according to DB table
    Model takes care of validations

On templates, `@variable_name` is a variable that comes from the controller,
passed on the render function
See topic index.html.eex to know how to pass variables from controller
to views

`put_flash` sends a one time message to tamplate


Oauth

Request phase = sending the user to the authorization website
Callback phase = the website redirects back to our site

Always hide API keys!
If using .env file, run `source .env` beforehand.

When creating model after migration:
    Define schema: `schema <table_name> do <columns>`
    Create changeset: describe how to change records
